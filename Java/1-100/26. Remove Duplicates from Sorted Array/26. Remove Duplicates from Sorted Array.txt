26. Xóa các phần tử trùng lặp khỏi Mảng Đã Sắp Xếp
Mức độ: Dễ

Yêu cầu:
Cho một mảng số nguyên nums đã được sắp xếp theo thứ tự không giảm, hãy xóa các phần tử trùng lặp tại chỗ (in-place), sao cho mỗi phần tử chỉ xuất hiện một lần. Thứ tự tương đối giữa các phần tử nên được giữ nguyên.
Sau đó, trả về số lượng phần tử khác nhau trong mảng nums.
Giả sử số lượng phần tử khác nhau là k, để lời giải được chấp nhận, bạn cần thực hiện các điều sau:
Thay đổi mảng nums sao cho k phần tử đầu tiên chứa các phần tử khác nhau theo đúng thứ tự ban đầu trong nums.
Các phần tử còn lại không quan trọng, cũng như kích thước thực tế của mảng.
Trả về k.

Trình chấm sẽ kiểm tra lời giải của bạn bằng đoạn mã sau:
int[] nums = [...]; // Mảng đầu vào
int[] expectedNums = [...]; // Kết quả kỳ vọng với độ dài đúng

int k = removeDuplicates(nums); // Gọi hàm bạn cài đặt

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}

Nếu tất cả các biểu thức assert đúng, thì lời giải của bạn sẽ được chấp nhận.


Ví dụ 1:
Input: nums = [1,1,2]  
Output: 2, nums = [1,2,_]  
Giải thích: Hàm của bạn nên trả về k = 2, với hai phần tử đầu của mảng `nums` là 1 và 2.  
Những giá trị sau đó không quan trọng (do đó được viết là `_`).

Ví dụ 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]  
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]  
Giải thích: Hàm nên trả về k = 5, với năm phần tử đầu của mảng là 0, 1, 2, 3, và 4.  
Các phần tử sau không quan trọng.

Ràng buộc:
1 <= nums.length <= 3 * 10⁴
-100 <= nums[i] <= 100
Mảng nums đã được sắp xếp theo thứ tự không giảm (non-decreasing).